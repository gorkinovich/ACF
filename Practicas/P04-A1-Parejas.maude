--- **************************************************************************************
--- * ACF, Práctica 4: Arquitectura básica de red
--- * Paloma Galván Calleja, Gorka Suárez García
--- **************************************************************************************

---(======================================================================================

                |===================================================|
                | AVISO: Es importante cargar los módulos de maude  |
                |        para este ejercicio en el siguiente orden. |
                |===================================================|

load model-checker.maude
load full-maude.maude
load P04-A1-Parejas.maude

=========================================================================================)

--- **************************************************************************************
--- * Especifica y analiza en un módulo orientado a objetos una arquitectura de red
--- * básica. Esta arquitectura tiene, en un primer nivel, Procesos y Canales. Dentro
--- * de los procesos tendremos configuraciones con un objeto de tipo Nodo y mensajes,
--- * mientras que los canales comunican los distintos procesos y permiten el
--- * intercambio de mensajes. Para ello:
--- **************************************************************************************

--- **************************************************************************************
--- ******************************** Parte 1: Definición *********************************
--- **************************************************************************************

--- |************************************************************************************|
--- |                         Ejercicio 3 (módulos adicionales)                          |
--- |************************************************************************************|

*** |------------------------------------------------------------------------------------|
*** | Esta vista se usa para poder usar como parámetro el tipo Oid en cualquier módulo   |
*** | parametrizable que exista en Maude o necesitemos crear nosotros.                   |
*** |------------------------------------------------------------------------------------|
(view Oid from TRIV to CONFIGURATION is
    sort Elt to Oid .
endv)

*** |------------------------------------------------------------------------------------|
*** | Este módulo contiene un tipo parametrizable para formar tablas/mapas de valores    |
*** | que estén asociados a una clave determinada.                                       |
*** |------------------------------------------------------------------------------------|
(fmod TABLA{C :: TRIV, V :: TRIV} is

    *** |--------------------------------------------------------------------------------|
    *** | El tipo principal del módulo es Tabla, que dispone de un operador constructor  |
    *** | para indicar que la tabla está vacía y otro para formar una lista de elementos |
    *** | donde el orden no importa.                                                     |
    *** |--------------------------------------------------------------------------------|

    sort Tabla{C,V} .
    op tvacia : -> Tabla{C,V} [ctor] .
    op _&_ : Tabla{C,V} Tabla{C,V} -> Tabla{C,V} [ctor assoc comm id: tvacia] .

    *** |--------------------------------------------------------------------------------|
    *** | Dentro de la tabla tendremos un subtipo para indicar como se forman los nodos  |
    *** | internos de la estructura. Básicamente cada nodo se construye con un primer    |
    *** | valor que ejerce de clave y uno segundo para almacenar un dato cualquiera.     |
    *** |--------------------------------------------------------------------------------|

    sort NodoTabla{C,V} .
    subsort NodoTabla{C,V} < Tabla{C,V} .
    op `{_`,_`} : C$Elt V$Elt -> NodoTabla{C,V} [ctor] .

    *** |--------------------------------------------------------------------------------|
    *** | La función "inserta" recibe una tabla y un nodo a insertar. Primero busca si   |
    *** | existe algún nodo con la misma clave, para actualizar el contenido de dicha    |
    *** | entrada. Si no, simplemente lo añade a la tabla.                               |
    *** |--------------------------------------------------------------------------------|

    var Clave : C$Elt .
    vars V1 V2 : V$Elt .
    var TS : Tabla{C,V} .

    op inserta : Tabla{C,V} NodoTabla{C,V} -> Tabla{C,V} .

    eq inserta({Clave,V1} & TS, {Clave,V2}) = {Clave,V2} & TS .
    eq inserta(TS, {Clave,V1}) = TS & {Clave,V1} [owise] .

    *** |--------------------------------------------------------------------------------|
    *** | Sobrecargamos la función "inserta" para que permita tener como parámetros la   |
    *** | tabla, la clave y el valor a insertar sueltos, en ese orden.                   |
    *** |--------------------------------------------------------------------------------|

    op inserta : Tabla{C,V} C$Elt V$Elt -> Tabla{C,V} .
    eq inserta(TS, Clave, V2) = inserta(TS, {Clave,V2}) .

    *** |--------------------------------------------------------------------------------|
    *** | La función "elimina" recibe una tabla y una clave a eliminar. Primero busca    |
    *** | si existe algún nodo con la misma clave, para devolver el resto de la tabla.   |
    *** | Si no lo encuentra, devuelve la tabla entera.                                  |
    *** |--------------------------------------------------------------------------------|

    op elimina : Tabla{C,V} C$Elt -> Tabla{C,V} .

    eq elimina({Clave,V1} & TS, Clave) = TS .
    eq elimina(TS, Clave) = TS [owise] .

endfm)

--- |************************************************************************************|
--- |                         Ejercicio 5 (módulos adicionales)                          |
--- |************************************************************************************|

*** |------------------------------------------------------------------------------------|
*** | Esta vista se usa para poder usar como parámetro el tipo Msg en cualquier módulo   |
*** | parametrizable que exista en Maude o necesitemos crear nosotros.                   |
*** |------------------------------------------------------------------------------------|
(view Msg from TRIV to CONFIGURATION is
    sort Elt to Msg .
endv)

*** |------------------------------------------------------------------------------------|
*** | Este módulo contiene un tipo parametrizable para formar listas de valores de forma |
*** | sencilla como se ha visto en clase a lo largo del curso, o en el manual de Maude.  |
*** |------------------------------------------------------------------------------------|
(fmod LISTA{V :: TRIV} is
    sort Lista{V} .
    subsort V$Elt < Lista{V} .
    op lvacia : -> Lista{V} [ctor] .
    op _;_ : Lista{V} Lista{V} -> Lista{V} [ctor assoc id: lvacia] .
endfm)

--- **************************************************************************************
--- ******************************** Parte 1: Definición *********************************
--- **************************************************************************************

(omod RED-BASICA is

--- **************************************************************************************
--- * Ejercicio 1: Define una clase Proceso con un único atributo datos de tipo
--- * Configuration.
--- **************************************************************************************

    *** |--------------------------------------------------------------------------------|
    *** | Aquí tenemos la clase "Proceso" que va a ser la encargada de almacenar los     |
    *** | objetos de tipo nodo que vamos a tener en la práctica.                         |
    *** |--------------------------------------------------------------------------------|

    class Proceso | datos : Configuration .

--- **************************************************************************************
--- * Ejercicio 2: Define una clase Nodo con un atributo de tipo String con su dirección
--- * IP y otro de tipo Estado (que es necesario definir, y que toma valores inactivo,
--- * esperando y activo), que indica su estado. NOTA: Para simplificar las reglas
--- * posteriores, es interesante que el identificador de los procesos se pueda deducir
--- * del identificador de los nodos. Por ejemplo, si el nombre de cierto proceso es ’P,
--- * entonces el Nodo que contiene podría llamarse n(’P). Para todo esto es necesario
--- * definir los constructores y/o subtipos adecuados.
--- **************************************************************************************

    *** |--------------------------------------------------------------------------------|
    *** | Primero tenemos que importar algunos módulos que trae la librería de Maude.    |
    *** |--------------------------------------------------------------------------------|

    pr QID .
    pr NAT .
    pr STRING .

    *** |--------------------------------------------------------------------------------|
    *** | Aquí tenemos el tipo "Estado" que ejerce de tipo enumerado, para indicar la    |
    *** | situación actual de un nodo de la red que vamos a modelar.                     |
    *** |--------------------------------------------------------------------------------|

    sort Estado .
    ops inactivo esperando activo : -> Estado [ctor] .

    *** |--------------------------------------------------------------------------------|
    *** | A fin de poder tener identificadores de objetos vamos a indicar a Maude que    |
    *** | usaremos los identificadores con comilla para dicho propósito.                 |
    *** |                                                                                |
    *** | Además vamos a utilizar un par de constructores para crear identificadores     |
    *** | de objetos compuestos, porque a lo largo de la práctica vamos a necesitar      |
    *** | saber a qué proceso pertenece cada nodo. Con ese objetivo tendremos dos        |
    *** | versiones, una sólo con el identificador del proceso y otra con un número      |
    *** | natural adicional, para poder tener varios nodos dentro de un mismo proceso.   |
    *** |--------------------------------------------------------------------------------|

    subsort Qid < Oid .
    op n : Oid -> Oid [ctor] .
    op n : Oid Nat -> Oid [ctor] .

    *** |--------------------------------------------------------------------------------|
    *** | Finalmente declaramos la clase "Nodo" de la que van a heredar las diferentes   |
    *** | clases que vamos a tener dentro de los procesos de la práctica.                |
    *** |--------------------------------------------------------------------------------|

    class Nodo | ip : String, estado : Estado .

--- **************************************************************************************
--- * Ejercicio 3: Define una subclase Centro de Nodo que tiene como atributo una
--- * tabla que tiene como clave direcciones IP y como valores los identificadores
--- * (de tipo Oid) de los respectivos nodos.
--- * + Esta tabla debería estar definida en un módulo funcional con operaciones para
--- *   insertar una dirección y un identificador (si la dirección ya está se modifica
--- *   el identificador) y para eliminar una entrada de la tabla dada la dirección.
--- **************************************************************************************

    *** |--------------------------------------------------------------------------------|
    *** | Importamos el módulo para tener tablas en nuestro modelo y creamos el tipo     |
    *** | encargado de almacenar identificadores de nodos asociados a las direcciones    |
    *** | IP de los mismos.                                                              |
    *** |--------------------------------------------------------------------------------|

    pr TABLA{String,Oid} .

    sort TablaIPs .
    subsort Tabla{String,Oid} < TablaIPs .

    *** |--------------------------------------------------------------------------------|
    *** | La clase "Centro" es un tipo de nodo y se encarga de tener una tabla para      |
    *** | poder traducir de direcciones IP a identificadores de objeto nodo.             |
    *** |--------------------------------------------------------------------------------|

    class Centro | tabla : TablaIPs .
    subclass Centro < Nodo .

    *** |--------------------------------------------------------------------------------|
    *** | Para facilitar la creación de objetos de tipo "Centro" tendremos una serie de  |
    *** | funciones que hacen de algo parecido a los constructores de toda la vida.      |
    *** |--------------------------------------------------------------------------------|

    var O : Oid .
    var N : Nat .
    var S : String .

    op nuevoCentro : Oid String -> Object .
    eq nuevoCentro(O, S) = < n(O) : Centro | tabla : tvacia,
                                                ip : S,
                                            estado : inactivo > .

    op nuevoCentro : Oid Nat String -> Object .
    eq nuevoCentro(O, N, S) = < n(O,N) : Centro | tabla : tvacia,
                                                     ip : S,
                                                 estado : inactivo > .

--- **************************************************************************************
--- * Ejercicio 4: Define una subclase Extremo de Nodo, con un atributo centro de
--- * tipo Oid con el identificador del centro. Inicialmente el valor de esta
--- * atributo es null (que tendrás que definir).
--- **************************************************************************************

    *** |--------------------------------------------------------------------------------|
    *** | Vamos a definir "null" como un identificador de objeto vacío, que vamos a      |
    *** | utilizar en la clase "Extremo" para inicializar el campo "centro".             |
    *** |--------------------------------------------------------------------------------|

    op null : -> Oid [ctor] .

    *** |--------------------------------------------------------------------------------|
    *** | La clase "Extremo" es un tipo de nodo y se encarga de representar a aquellos   |
    *** | nodos que hacen de clientes, frente a "Centro" que hace de servidor.           |
    *** |--------------------------------------------------------------------------------|

    class Extremo | centro : Oid .
    subclass Extremo < Nodo .

    *** |--------------------------------------------------------------------------------|
    *** | Para facilitar la creación de objetos de tipo "Extremo" tendremos una serie    |
    *** | de funciones que hacen de algo parecido a los constructores de toda la vida.   |
    *** |--------------------------------------------------------------------------------|

    op nuevoExtremo : Oid String -> Object .
    eq nuevoExtremo(O, S) = < n(O) : Extremo | centro : null,
                                                   ip : S,
                                               estado : inactivo > .

    op nuevoExtremo : Oid Nat String -> Object .
    eq nuevoExtremo(O, N, S) = < n(O,N) : Extremo | centro : null,
                                                        ip : S,
                                                    estado : inactivo > .

--- **************************************************************************************
--- * Ejercicio 5: Define una clase Canal, con atributos origen y destino, de tipo Oid;
--- * listaOrigen y listaDestino, de tipo listaMsg (que tendrás que definir); y estado,
--- * de tipo EstadoCanal (que tendrás que definir con los valores ok y error). Los
--- * valores de origen y destino son los Oid de los procesos que conecta.
--- **************************************************************************************

    *** |--------------------------------------------------------------------------------|
    *** | Importamos el módulo para tener listas en nuestro modelo y creamos el tipo     |
    *** | encargado de almacenar colas de mensajes que el canal de comunicación va a     |
    *** | almacenar en su interior.                                                      |
    *** |--------------------------------------------------------------------------------|

    pr LISTA{Msg} .

    sort ListaMsg .
    subsort Lista{Msg} < ListaMsg .

    *** |--------------------------------------------------------------------------------|
    *** | Aquí tenemos el tipo "EstadoCanal" que ejerce de tipo enumerado, para indicar  |
    *** | la situación actual de un canal de la red que vamos a modelar.                 |
    *** |--------------------------------------------------------------------------------|

    sort EstadoCanal .
    ops ok error : -> EstadoCanal [ctor] .

    *** |--------------------------------------------------------------------------------|
    *** | Con la clase "Canal" representaremos la vía mediante los diferentes procesos,  |
    *** | de nuestro modelo, se van a poder comunicar entre sí. Para ello tendremos que  |
    *** | contar con un objeto de esta clase donde indicar como origen un proceso        |
    *** | determinado y como destino otro cualquiera que queramos.                       |
    *** |--------------------------------------------------------------------------------|

    class Canal | origen : Oid, destino : Oid, listaOrigen : ListaMsg,
                  listaDestino : ListaMsg, estado : EstadoCanal .

    *** |--------------------------------------------------------------------------------|
    *** | Para facilitar la creación de objetos de tipo "Canal" tendremos una serie de   |
    *** | funciones que hacen de algo parecido a los constructores de toda la vida.      |
    *** |--------------------------------------------------------------------------------|

    vars OC OPO OPD : Oid .
    var EC : EstadoCanal .

    op nuevoCanal : Oid Oid Oid -> Object .
    eq nuevoCanal(OC, OPO, OPD) = < OC : Canal | origen : OPO,
                                                destino : OPD,
                                            listaOrigen : lvacia,
                                           listaDestino : lvacia,
                                                 estado : ok > .

    op nuevoCanal : Oid Oid Oid EstadoCanal -> Object .
    eq nuevoCanal(OC, OPO, OPD, EC) = < OC : Canal | origen : OPO,
                                                    destino : OPD,
                                                listaOrigen : lvacia,
                                               listaDestino : lvacia,
                                                     estado : EC > .

--- **************************************************************************************
--- * Ejercicio 6: Define un mensaje info, que no tiene destinatario y que tiene como
--- * argumentos un String y un Oid.
--- * + Este mensaje lo envían los objetos de tipo Extremo inactivos para indicar su
--- *   dirección y su nombre. Al enviarlo pasa al estado esperando.
--- * + Este mensaje es recibido por objetos de tipo Centro, y se utiliza para
--- *   actualizar la tabla.
--- * + El Centro pasa de inactivo a activo en cuanto recibe uno de estos mensajes
--- *   (nunca entra en estado esperando).
--- *
--- * Ejercicio 7: Un mensaje respuesta-info, que tiene como destinatario un Oid y
--- * como argumento otro Oid.
--- * + Este mensaje lo envía el Centro al Extremo como respuesta al mensaje info.
--- * + Cuando el Extremo recibe el mensaje actualiza su atributo centro y pasa al
--- *   estado activo.
--- **************************************************************************************

    *** |--------------------------------------------------------------------------------|
    *** | Definimos un par de mensajes para crear una dinámica de comunicación en la que |
    *** | los extremos van a emitir un mensaje informativo para que llegue al centro,    |
    *** | donde se actualizará su tabla de direcciones IP y responderá con otro mensaje  |
    *** | que actualizará el extremo otorgándole un centro asociado.                     |
    *** |--------------------------------------------------------------------------------|

    msg info : String Oid -> Msg .
    msg para_respuesta-info_ : Oid Oid -> Msg .

    *** |--------------------------------------------------------------------------------|
    *** | La primera regla a definir es como se emiten los mensajes de información desde |
    *** | los nodos de tipo "Extremo". Para ello dicho nodo ha de estar "inactivo". Una  |
    *** | vez emitido pasa al estado de "esperando" hasta que reciba una respuesta.      |
    *** |--------------------------------------------------------------------------------|

    var OP : Oid .
    var CS : Configuration .

    rl[extremo.env->info] :
        < OP : Proceso | datos :
            < O : Extremo | ip     : S,
                            estado : inactivo >
            CS >
        =>
        < OP : Proceso | datos :
            < O : Extremo | estado : esperando >
            info(S, O)
            CS > .

    *** |--------------------------------------------------------------------------------|
    *** | La segunda regla a definir es como se reciben los mensajes de información en   |
    *** | los nodos de tipo "Centro". Si el centro está "inactivo" tendrá que cambiar    |
    *** | su estado a "activo", si no el estado se queda como está. Además una vez       |
    *** | recibida la información tiene que emitir un mensaje de respuesta.              |
    *** |--------------------------------------------------------------------------------|

    var O' : Oid .
    var T : TablaIPs .
    var E : Estado .

    rl[centro.rec->info-inactivo] :
        < OP : Proceso | datos :
            info(S, O)
            < O' : Centro | tabla  : T,
                            estado : inactivo >
            CS >
        =>
        < OP : Proceso | datos :
            < O' : Centro | tabla  : inserta(T, S, O),
                            estado : activo >
            (para O respuesta-info O')
            CS > .

    crl[centro.rec->info] :
        < OP : Proceso | datos :
            info(S, O)
            < O' : Centro | tabla  : T,
                            estado : E >
            CS >
        =>
        < OP : Proceso | datos :
            < O' : Centro | tabla : inserta(T, S, O) >
            (para O respuesta-info O')
            CS >
        if E =/= inactivo .

    *** |--------------------------------------------------------------------------------|
    *** | La tercera regla a definir es como se reciben los mensajes de respuesta en los |
    *** | nodos de tipo "Extremo". Una vez recibido se actualiza el "centro" al que está |
    *** | asociado, así como su estado.                                                  |
    *** |--------------------------------------------------------------------------------|

    rl[extremo.rec->respuesta-info] :
        < OP : Proceso | datos :
            (para O respuesta-info O')
            < O : Extremo | >
            CS >
        =>
        < OP : Proceso | datos :
            < O : Extremo | centro : O',
                            estado : activo >
            CS > .

endom)

--- **************************************************************************************
--- * Ejercicio 8: Define, en un módulo EJEMPLO, una configuración inicial con un
--- * proceso que contiene un objeto de tipo Centro y tres procesos que contienen
--- * objetos de tipo Extremo, todos ellos inicialmente inactivos. Deben existir,
--- * además, canales entre los procesos que contienen los extremos y el proceso
--- * que contiene el centro. Utiliza el comando rew para ejecutarlo.
--- **************************************************************************************

(mod EJEMPLO is
    pr RED-BASICA .

    *** |--------------------------------------------------------------------------------|
    *** | Configuración inicial construida a pelo.                                       |
    *** |--------------------------------------------------------------------------------|

    op cfgI1 : -> Configuration .
    eq cfgI1 =
        < 'P0 : Proceso | datos :
            < n('P0, 1) : Centro | tabla : tvacia, ip : "192.168.0.1", estado : inactivo > >
        < 'P1 : Proceso | datos :
            < n('P1, 1) : Extremo | centro : null, ip : "192.168.1.1", estado : inactivo >
            < n('P1, 2) : Extremo | centro : null, ip : "192.168.1.2", estado : inactivo >
            < n('P1, 3) : Extremo | centro : null, ip : "192.168.1.3", estado : inactivo > >
        < 'P2 : Proceso | datos :
            < n('P2, 1) : Extremo | centro : null, ip : "192.168.2.1", estado : inactivo >
            < n('P2, 2) : Extremo | centro : null, ip : "192.168.2.2", estado : inactivo >
            < n('P2, 3) : Extremo | centro : null, ip : "192.168.2.3", estado : inactivo > >
        < 'P3 : Proceso | datos :
            < n('P3, 1) : Extremo | centro : null, ip : "192.168.3.1", estado : inactivo >
            < n('P3, 2) : Extremo | centro : null, ip : "192.168.3.2", estado : inactivo >
            < n('P3, 3) : Extremo | centro : null, ip : "192.168.3.3", estado : inactivo > >
        < 'C1 : Canal | origen : 'P0, destino : 'P1, listaOrigen : lvacia,
            listaDestino : lvacia, estado : ok >
        < 'C2 : Canal | origen : 'P0, destino : 'P2, listaOrigen : lvacia,
            listaDestino : lvacia, estado : ok >
        < 'C3 : Canal | origen : 'P0, destino : 'P3, listaOrigen : lvacia,
            listaDestino : lvacia, estado : ok > .

    *** |--------------------------------------------------------------------------------|
    *** | Configuración inicial construida mediante funciones de "construcción".         |
    *** |--------------------------------------------------------------------------------|

    op cfgI2 : -> Configuration .
    eq cfgI2 =
        < 'P0 : Proceso | datos : nuevoCentro('P0, 1, "192.168.0.1") >
        < 'P1 : Proceso | datos :
            nuevoExtremo('P1, 1, "192.168.1.1")
            nuevoExtremo('P1, 2, "192.168.1.2")
            nuevoExtremo('P1, 3, "192.168.1.3") >
        < 'P2 : Proceso | datos :
            nuevoExtremo('P2, 1, "192.168.2.1")
            nuevoExtremo('P2, 2, "192.168.2.2")
            nuevoExtremo('P2, 3, "192.168.2.3") >
        < 'P3 : Proceso | datos :
            nuevoExtremo('P3, 1, "192.168.3.1")
            nuevoExtremo('P3, 2, "192.168.3.2")
            nuevoExtremo('P3, 3, "192.168.3.3") >
        nuevoCanal('C1, 'P0, 'P1)
        nuevoCanal('C2, 'P0, 'P2)
        nuevoCanal('C3, 'P0, 'P3) .

    *** |--------------------------------------------------------------------------------|
    *** | Configuración inicial para probar la comunicación de mensajes.                 |
    *** |--------------------------------------------------------------------------------|

    op cfgI3 : -> Configuration .
    eq cfgI3 =
        < 'P0 : Proceso | datos :
            nuevoCentro('P0, 1, "192.168.0.1")
            nuevoExtremo('P0, 2, "192.168.0.2")
            nuevoExtremo('P0, 3, "192.168.0.3") > .

endm)

***(**************************************************************************************

Maude> (red in EJEMPLO : cfgI1 == cfgI2 .)
reduce in EJEMPLO :
  cfgI1 == cfgI2
result Bool :
  true


Maude> (rew in EJEMPLO : cfgI2 .)
rewrite in EJEMPLO :
  cfgI2
result Configuration :
  < 'C1 : Canal | destino : 'P1, estado : ok, listaDestino : lvacia,
                  listaOrigen : lvacia, origen : 'P0 >
  < 'C2 : Canal | destino : 'P2, estado : ok, listaDestino : lvacia,
                  listaOrigen : lvacia, origen : 'P0 >
  < 'C3 : Canal | destino : 'P3, estado : ok, listaDestino : lvacia,
                  listaOrigen : lvacia, origen : 'P0 >
  < 'P0 : Proceso | datos :
    < n('P0,1) : Centro | estado : inactivo, ip : "192.168.0.1", tabla : tvacia > >
  < 'P1 : Proceso | datos : (
    info("192.168.1.1", n('P1,1))
    info("192.168.1.2", n('P1,2))
    info("192.168.1.3", n('P1,3))
    < n('P1,1) : Extremo | centro : null, estado : esperando, ip : "192.168.1.1" >
    < n('P1,2) : Extremo | centro : null, estado : esperando, ip : "192.168.1.2" >
    < n('P1,3) : Extremo | centro : null, estado : esperando, ip : "192.168.1.3" > ) >
  < 'P2 : Proceso | datos : (
    info("192.168.2.1", n('P2,1))
    info("192.168.2.2", n('P2,2))
    info("192.168.2.3", n('P2,3))
    < n('P2,1) : Extremo | centro : null, estado : esperando, ip : "192.168.2.1" >
    < n('P2,2) : Extremo | centro : null, estado : esperando, ip : "192.168.2.2" >
    < n('P2,3) : Extremo | centro : null, estado : esperando, ip : "192.168.2.3" > ) >
  < 'P3 : Proceso | datos : (
    info("192.168.3.1", n('P3,1))
    info("192.168.3.2", n('P3,2))
    info("192.168.3.3", n('P3,3))
    < n('P3,1) : Extremo | centro : null, estado : esperando, ip : "192.168.3.1" >
    < n('P3,2) : Extremo | centro : null, estado : esperando, ip : "192.168.3.2" >
    < n('P3,3) : Extremo | centro : null, estado : esperando, ip : "192.168.3.3" >)>


Maude> (rew in EJEMPLO : cfgI3 .)
rewrite in EJEMPLO :
  cfgI3
result Object :
  < 'P0 : Proceso | datos : (
    < n('P0,1) : Centro | estado : activo, ip : "192.168.0.1",
                          tabla : ({"192.168.0.2",n('P0,2)} &
                                   {"192.168.0.3",n('P0,3)} ) >
    < n('P0,2) : Extremo | centro : n('P0,1), estado : activo, ip : "192.168.0.2" >
    < n('P0,3) : Extremo | centro : n('P0,1), estado : activo, ip : "192.168.0.3" > ) >

*****************************************************************************************)
