---(
Gorka Suárez García, ACF

Ejercicio 3:
    El fichero cs_huecos.maude define una sección crítica en la que los
    procesos entran siendo previamente ordenados en un montículo cuando
    solicitan entrar.
    (a) Intenta entender lo que hace el módulo.
    (b) Rellena las partes de código que se han sustituido por almohadillas.
        La longitud de la cadena de almohadillas no es necesariamente
        representativa de la longitud del código sustituido.
    (c) Ejecuta los comandos en la parte inferior. Copia y pega el resultado
        que obtengas en Maude, y explica en una frase qué se ejecuta y el
        resultado que se obtiene.
)

load P03-Process.maude

--- ************************************************************

mod CRITICAL is
    pr HEAP .

    *** A process with default ("ProcessWD") is a generalized
    *** process that can also be equal to "noProcess".
    sort ProcessWD .
    subsort Process < ProcessWD .
    op noProcess : -> ProcessWD [ctor] .

    *** The sort "Processes" stands for a soup of processes built with
    *** the juxtaposition operator,"__", while a "CPU" is a multiset of
    *** processes, a heap that orders the processes by using their priority,
    *** and a critical section represented by a process with default.
    sorts Processes CPU .
    subsort Process < Processes .

    op empty : -> Processes [ctor] .
    op __ : Processes Processes -> Processes [ctor assoc comm id: empty] .
    op _[_][_] : Processes Heap ProcessWD -> CPU [ctor] .

    var N : Nat .
    var H : Heap .
    var P : Process .
    var PS : Processes .
    var S : String .
    var PWD : ProcessWD .

    *** The rule "ask" introduces a process into the heap, where
    *** it is appropriately located.
    rl [ask] : (P PS) [H] [PWD] => PS [insert(P,H)] [PWD] .

    *** The process with the highest priority in the heap (i.e., the root) is
    *** introduced with the "cs" rule in the critical section if it is empty.
    crl [cs] : PS [H] [noProcess] => PS [delete(H)] [root(H)]
        if not empty(H) .

    *** The rule "exit" takes the process in the critical section to the
    *** soup of inactive processes.
    rl [exit] : PS [H] [P] => (PS P) [H] [noProcess] .

    *** The constants "p1", "p2", "p3", and "initial" are created for
    *** testing purposes.
    ops p1 p2 p3 : -> Process .
    eq p1 = < "p1", 5 > .
    eq p2 = < "p2", 4 > .
    eq p3 = < "p3", 3 > .

    op initial : -> CPU .
    eq initial = p1 p2 p3 [empty] [noProcess] .
endm

--- ************************************************************

---(

Resultados:
===========

Maude> rew [5] initial .
rewrite [5] in CRITICAL : initial .
rewrites: 28 in 9999999999ms cpu (0ms real) (0 rewrites/second)
result CPU: (< "p2",4 > < "p3",3 >)[empty][< "p1",5 >]

------------------------------------------------------------

Maude> rew [7] initial .
rewrite [7] in CRITICAL : initial .
rewrites: 33 in 9999999999ms cpu (0ms real) (0 rewrites/second)
result CPU: (< "p2",4 > < "p3",3 >)[empty[< "p1",5 >]empty][noProcess]

------------------------------------------------------------

Maude> search initial =>* PS:Processes [H:Heap] [< "p3", N:Nat >] .
search in CRITICAL : initial =>* PS[H][< "p3",N >] .

Solution 1 (state 9)
states: 10  rewrites: 239 in 6375980000ms cpu (3ms real) (0 rewrites/second)
PS --> < "p1",5 > < "p2",4 >
H --> (empty).Heap
N --> 3

Solution 2 (state 16)
states: 17  rewrites: 636 in 6375980000ms cpu (8ms real) (0 rewrites/second)
PS --> < "p2",4 >
H --> empty[< "p1",5 >]empty
N --> 3

Solution 3 (state 17)
states: 18  rewrites: 640 in 6375980000ms cpu (11ms real) (0 rewrites/second)
PS --> < "p1",5 >
H --> empty[< "p2",4 >]empty
N --> 3

Solution 4 (state 20)
states: 21  rewrites: 936 in 6375980000ms cpu (15ms real) (0 rewrites/second)
PS --> (empty).Processes
H --> (empty[< "p2",4 >]empty)[< "p1",5 >]empty
N --> 3

No more solutions.
states: 21  rewrites: 974 in 6375980000ms cpu (18ms real) (0 rewrites/second)

------------------------------------------------------------

Maude> search initial =>* PS:Processes [H:Heap] [< S:String, N:Nat >] s.t. S:String == "p2" .
search in CRITICAL : initial =>* PS[H][< S,N >] such that S == "p2" = true .

Solution 1 (state 8)
states: 9  rewrites: 168 in 6375980000ms cpu (4ms real) (0 rewrites/second)
PS --> < "p1",5 > < "p3",3 >
H --> (empty).Heap
S --> "p2"
N --> 4

Solution 2 (state 14)
states: 15  rewrites: 629 in 6375980000ms cpu (11ms real) (0 rewrites/second)
PS --> < "p1",5 >
H --> empty[< "p3",3 >]empty
S --> "p2"
N --> 4

Solution 3 (state 15)
states: 16  rewrites: 634 in 6375980000ms cpu (14ms real) (0 rewrites/second)
PS --> < "p3",3 >
H --> empty[< "p1",5 >]empty
S --> "p2"
N --> 4

Solution 4 (state 19)
states: 20  rewrites: 879 in 6375980000ms cpu (20ms real) (0 rewrites/second)
PS --> (empty).Processes
H --> (empty[< "p3",3 >]empty)[< "p1",5 >]empty
S --> "p2"
N --> 4

No more solutions.
states: 21  rewrites: 986 in 6375980000ms cpu (28ms real) (0 rewrites/second)

------------------------------------------------------------

Maude> search initial =>* PS:Processes [H:Heap] [< S:String, N:Nat >] such that S:String == "p1" .
search in CRITICAL : initial =>* PS[H][< S,N >] such that S == "p1" = true .

Solution 1 (state 6)
states: 7  rewrites: 94 in 6375980000ms cpu (2ms real) (0 rewrites/second)
PS --> < "p2",4 > < "p3",3 >
H --> (empty).Heap
S --> "p1"
N --> 5

Solution 2 (state 11)
states: 12  rewrites: 368 in 6375980000ms cpu (10ms real) (0 rewrites/second)
PS --> < "p3",3 >
H --> empty[< "p2",4 >]empty
S --> "p1"
N --> 5

Solution 3 (state 13)
states: 14  rewrites: 494 in 6375980000ms cpu (14ms real) (0 rewrites/second)
PS --> < "p2",4 >
H --> empty[< "p3",3 >]empty
S --> "p1"
N --> 5

Solution 4 (state 18)
states: 19  rewrites: 714 in 6375980000ms cpu (20ms real) (0 rewrites/second)
PS --> (empty).Processes
H --> (empty[< "p3",3 >]empty)[< "p2",4 >]empty
S --> "p1"
N --> 5

No more solutions.
states: 21  rewrites: 986 in 6375980000ms cpu (27ms real) (0 rewrites/second)

)
