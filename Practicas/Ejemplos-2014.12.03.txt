***( -------------------------------------
***  Módulos funcionales
***  ------------------------------------- )

fmod NAT is
    sort Nat .
    op 0 : -> Nat [ctor] .
    op s : Nat -> Nat [ctor] .

    vars N N' : Nat .
    op _+_ : Nat Nat -> Nat [comm asoc] .
    eq 0 + N = N .
    eq s(N) + N' = S(N + N') .

    op _*_ : Nat Nat -> Nat [comm asoc] .
    eq 0 * N = 0 .
    eq s(N) * N' = N * N' + N' .
endfm

> red s(s(0)) + s(s(s(0))) .

fmod PILA is
    pr NAT .
    op pv : -> Pila [ctor] .
    op apilar : Pila Nat -> Pila [ctor] .

    var P : Pila .
    var N N' : Nat .
    op desapilar : Pila -> Pila .
    eq desapilar(pv) = pv .
    eq desapilar(apila(P, N)) = P .

    op cima : Pila -> Nat .
    eq cima(apila(P, N)) = N .
    eq cima(pv) = [pila] .

    op esVacia : Pila -> Bool .
    eq esVacia(pv) = true .
    eq esVacia(P) = false [owise] .

    op cuenta : Pila -> Nat .
    eq cuenta(pv) = 0 .
    eq cuenta(apila(P, N)) = s(cuentaP) .

    op esta : Pila Nat -> Bool .
    eq esta(pv, N) = false .
    eq esta(apila(P, N), N') =
        if N == N' then true
        else esta(P, N') fi .
    ---(
    eq esta(P, N) =
        if esVacia(P) then
            false
        else
            if cima(P) == N then
                true
            else
                esta(desapila(P), N)
            fi
        fi .
    )
endfm

fmod LISTAS is
    pr Nat .
    sort Lista ListaOrd .
    subsort Nat < ListaOrd < Lista .
    op lv : -> ListaOrd [ctor] .
    op __ : Lista Lista -> Lista [ctor assoc id: lv] .
    vars L L' : Lista .
    vars N N' N'' : Nat .
    cmb N N' LO : ListaOrd
        if N <= N' /\ N' LO : ListaOrd .
    op ordena : Lista -> ListaOrd .
    eq ordena(lv) = lv .
    eq ordena(N) = N .
    eq ordena(L N N' L') = ordena(L N' N L')
        if N > N' .
    eq ordena(L) = L [owise] .
    eq inserta : ListaOrd Nat -> ListaOrd .
    eq inserta(lv, N) = N .
    eq inserta(N L, N') =
        if N <= N' then
            N inserta(L, N')
        else
            N' N L
        fi .
    op ordins : Lista -> ListaOrd .
    eq ordins(lv) = lv .
    eq ordins(N L) = inserta(ordins(L), N) .
    op busca : Lista Nat -> Bool .
    eq busca(L N L', N) = true .
    eq busca(L, N) = false [owise] .
    op buscaPos : Lista Nat -> Int .
    op buscaPosAux : Lista Nat Nat -> Int .
    op buscaPosAux(lv, N, N') = -1 .
    eq buscaPosAux(N L, N', N'') =
        if N == N' then
            N''
        else
            buscarPosAux(L, N', s(N''))
        fi .
    eq buscaPos(L, N') = buscarPosAux(L, N', 0) .
endfm

***( -------------------------------------
***  Módulos
***  ------------------------------------- )

mod PIZARRA is
    pr NAT .
    sort Pizarra .
    op pv : -> Pizarra [ctor] .
    op __ : Pizarra Pizarra -> Pizarra [ctor assoc comm id: pv] .
    subsort Nat < Pizarra .
    vars N N' : Nat .
    rl [sumar] : N N' => N + N' .
    rl [divide] : N N' => N div N' .
endm

> rew 1 3 2 8 7
> frew 1 3 2 8 7
> search 1 3 2 8 7 =>* 4 .
> show path 17 .

mod SALTOS is
    sort Tablero .
    sort Ficha .
    subsort Ficha > Tablero .
    ops o x h : -> Ficha [ctor]
    op __ : Tablero Tablero -> Tablero [ctor assoc] .
    rl[andarD] : o h => h o .
    rl[saltoD] : o x h => h x o .
    rl[andarI] : h x => x h .
    rl[saltoI] : h o x => x o h.
endm

> rew o o o h x x x .
  Tablero: h o o o x x x
> search [1] o o o h x x x =>* x x x h o o o .
  Solution 1 (State 71)
> show path 71 .
  o o o h x x x
  ==[saltoD]=>
  o o h o x x x
  ...

*** ----------------------------------------

Nota: search
      =>*
      =>+
      =>!

*** ----------------------------------------

mod VASIJAS is
    pr NAT .
    sort Vasija .
    op v : Nat Nat -> Vasija [ctor] .
    ***    Cap Act
    sort CjtoV .
    subsort Vasija < CjtoV .
    op __ : CjtoV CjtoV -> CjtoV [ctor assoc comm] .
    rl[llena] : v(N,N') => v(N,N) .
    rl[vacia] : v(N,N') => v(N,0) .
    crl[trasp1] : v(C1,A2) v(C2,A2) => v(C1,0) v(C2,A1+A2)
        if A1 + A2 <= C2 .
    crl[trasp2] : v(C1,A2) v(C2,A2) => v(C1, sd(A1, sd(C2, A2))) v(C2, C2)
        if A1 + A2 > C2 .
endm

> search [1] v(3,0) v(5,0) v(8,0) =>* v(N:Nat,4) C:CjtoV .

*** ----------------------------------------

mod JOSEFO is
    pr Nat .
    sort Persona .
    op p : Nat -> Persona [ctor] .
    sort Cueva .
    sort Cuchillo .
    op c : -> Cuchillo [ctor] .
    subsort Persona Cuchillo < Cueva .
    op __ : Cueva Cueva -> Cueva [ctor assoc] .

    ***( Versión errónea 1:
        rl[matar] : c p(N) p(N') p(N'') => p(N) p(N') c .
        rl[matar2] : c p(N) p(N') => p(N') .
    )

    sort CuevaCerrada .
    op {_} : Cueva -> CuevaCerrada .

    ***( Versión errónea 2:
        rl[matar] : c p(N) p(N') p(N'') => p(N) p(N') c .
        rl[matar2] : {c p(N) p(N')} => {p(N')} .
        rl[alppio] : {CUEVA c} => {c CUEVA} .
        rl[matar3] : {P P' CUEVA c P''} => {P c CUEVA P''} .
        rl[matar3] : {P CUEVA c P' P''} => {c CUEVA P' P''} .
    )

    rl[matar] : {c P P' P'' CUEVA} => { c CUEVA P P'} .
    rl[matar2] : {c P P'} => {P'} .
endm

***( -------------------------------------
***  Módulos OO (Full-Maude)
***  ------------------------------------- )

*** op omod_is_endom : ... -> Module .

(omod BANCO is
    pr STRING .
    class Cuenta | titular : String, saldo : Nat .
    msg to_transferencia_ : String Nat -> Msg .
    msg to_debito_ : String Nat -> Msg .

    rl[transferir] : (to S transferencia N)
        < O : Cuenta | titular : S, saldo : N' >
        => < O : Cuenta | saldo : N+N' > .

    msg estoySinBlanca : String -> Msg .

    rl[auxilio] : < O : Cuenta | titular : S, saldo : 0 >
        => < O : Cuenta | > estoySinBlanca(S) .

    class Banco | arcas : Nat .

    rl[donar] : estoySinBlanca(S)
        < O : Banco | arcas : N >
        => < O : Banco | arcas : N div 2> (to S transferencia (N div 2)) .

    ***(
        Especificar valores:
            < Oid : Cid | titular : "a", saldo : N > .

        Oid no tiene tipo en concreto, habría que hacer:
            subsort String < Oid .
            < "c1" : Cuenta | titular : "a", saldo : 3 > .

        La opción clásica en Maude:
            subsort Oid < Oid .

        Al poner omod obtienes el módulo Configuration:
            subort Object Msg < Configuration .
            op __ : Configuration Configuration -> Configuration [ctor assoc comm id:none] .
    )
endom)

(omod PILA is
    pr NAT .
    class Pila | cima : Oid .
    class Nodo | dato : Nat, sig : Oid .
    op nil : -> Oid [ctor] .
    ***(
        < 'P : Pila | cima : 'n1 >
        < 'n1 : Nodo | dato : 7, sig : 'n2 >
        < 'n2 : Nodo | dato : 3, sig : nil >
    )

    subsort Qid < Oid .
    msg to_:desapila : Oid -> Msg .
    msg to_:apila_ : Oid Nat -> Msg .

    rl[desapila] : to O:desapila
        < O : Pila | cima : O' >
        < O' : Nodo | sig : O'' >
        => < O Pila | cima : O'' > .

    op o : Oid Nat -> Oid [ctor] .
    rl[apila1] : to O:apila N
        < O : Pila | cima : nil >
        => < O : Pila | cima : o(O, 1) >
        < o(O, 1) : Nodo | dato : N, sig : nil > .

    rl[apila2] : to O:apila N
        < O : Pila | cima : o(O,N') >
        => < O : Pila | cima : o(O,s(N')) >
        < o(O,s(N')) : Nodo | dato : N, sig : o(O,N') > .
endom)

***( -------------------------------------
***  Elección de lider en un anillo
***  ------------------------------------- )

***(
    n(i) manda n(i+1) un mensaje con su prioridad
    cuando alguien recibe un mensaje de prioridad p
    y tiene prioridad p':
        p < p' -> Descarta el mensaje
        p > p' -> Lo reenvía al siguiente
        p = p' -> Eres el líder
)

(omod LIDER is
    pr NAT .
    sort Estado .
    ops idle activo lider -> Estado [ctor] .
    class Nodo | est : Estado, pr : Nat, sig : Oid .
    subsort Qid < Oid .
    msg to_:_ : Oid Nat -> Msg .
    rl[activar] : < O : Nodo | est : idle, pr : N, sig : O' >
        => < O : Nodo | est : activo >
        to O' : N.
    rl[recMayor] : to O : N
        < O : Nodo | pr : N', sig : O' >
        => < O : Nodo | > to O' : N
        if N > N' .
    rl[recMenor] : to O : N
        < O : Nodo | pr : N' >
        => < O : Nodo | >
        if N < N' .
    rl[recIg] : to O : N
        < O : Nodo | pr : N' >
        => < O : Nodo | estado : lider > .
endom)

***( -------------------------------------
***  Sección crítica
***  ------------------------------------- )

mod SC is
    pr NAT .
    sort Proceso .
    ops e i sc : Nat -> Proceso [ctor] .

    sort Grupo.
    subsort Proceso < Grupo .
    op __ : Grupo Grupo -> Grupo [ctor assoc] .

    sort Total .
    op {_} : Grupo -> Total [ctor] .

    var N : Nat .
    var G : Grupo .
    rl [ie] : i(N) => e(N) .
    rl [sci] : sc(N) => i(N) .
    crl [esc] : { G e(N) } => { G sc(N) } .
        if not enSC(G) .
    op enSC : Grupo -> Bool .
    eq enSC(sc(N) G) = true .
    eq enSC(G) = false [owise] .
endm

---(
S1: { i(1) i(2) } -> S2 S3
S2: { e(1) i(2) } -> S4 S5
S3: { i(1) e(2) } -> S5 S6
S4: { sc(1) i(2) } -> S1 S7
S5: { e(1) e(2) } -> S7 S8
S6: { i(1) sc(2) } -> S1 S8
S7: { sc(1) e(2) } -> S3
S8: { e(1) sc(2) } -> S2

([] = cuadrado, <> = Rombo, O, U, R)

[](no(sc(1) /\ sc(2))        = cierto
<>(sc(1))                    = falso
e(1) -> <>(sc(1))            = cierto
[](e(1) -> <>(sc(1)))        = falso
[](<>(sc(1)))                = falso
[](e(2) -> O(e(2) \/ sc(2))) = cierto
)

mod PROPS is
    pr SC .
    pr SATISFACTION .
    --- SATISFACTIN: State, Prop.
    --- State |= Prop

    subsort Total < State .
    op estaEnSC : Nat -> Prop [ctor] .
    ops estaEsp estaI : Nat -> Prop [ctor] .

    var N : Nat .
    var G : Grupo .
    var T : State .
    eq { G sc(N) } |= estaEnSC(N) = true .
    --- No haría falta, Maude lo calcula automáticamente:
    --- eq T |=  estaEnSC(N) = false [owise] .
    eq { G e(N) } |= estaEsp(N) = true .
    eq { G i(N) } |= estaI(N) = true .

    --- M |= f => El modelo M satisface la fórmula f.
endm

mod TEST is
    pr PROPS .
    pr LTL-SIMPLIFIER .
    pr MODEL-CHECKER .
    op initial : -> Total .
    eq initial = { i(1) i(2) } .
endm

---(
red modelCheck(initial, [](not(estaEnSC(1) and estaEnSC(2)))) .
)

***( -------------------------------------
***  Elección de lider en un anillo 2
***  ------------------------------------- )

(omod LIDER is
    pr NAT .
    sort Estado .
    ops idle activo lider -> Estado [ctor] .
    class Nodo | est : Estado, pr : Nat, sig : Oid .
    subsort Qid < Oid .
    msg to_:_ : Oid Nat -> Msg .
    rl[activar] : < O : Nodo | est : idle, pr : N, sig : O' >
        => < O : Nodo | est : activo >
        to O' : N.
    rl[recMayor] : to O : N
        < O : Nodo | pr : N', sig : O' >
        => < O : Nodo | > to O' : N
        if N > N' .
    rl[recMenor] : to O : N
        < O : Nodo | pr : N' >
        => < O : Nodo | >
        if N < N' .
    rl[recIg] : to O : N
        < O : Nodo | pr : N' >
        => < O : Nodo | estado : lider > .
endom)

(omod PROPS-LIDER is
    pr LIDER .
    pr SATISFACTION .
    subsort Configuration < State .

    var C : Configuration .
    op esLider : Oid -> Prop [ctor] .
    eq < O : Nodo | est : lider > C |= esLider(O) = true .

    ---(
        Configuration es commutativo, por lo que al hacer un
        encaje de patrones Maude ordena las listas para hacer
        todas las comprobaciones posibles.
    )
    op cuentaLideres : Configuration -> Nat .
    eq cuentaLideres(< O : Nodo | est : lider > C) =
        1 + cuentaLideres(C) .
    eq cuentaLideres(C) = 0 [owise] .

    op liderUnico : -> Prop [ctor] .
    eq C |= liderUnico = cuentaLideres(C) <= 1 .    
endom)

(omod TEST is
    pr PROPS-LIDER .
    pr LTL-SIMPLIFIER .
    pr MODEL-CHECKER .
    op initial : -> Configuration .
    eq initial = < 'n1 : Nodo | est : idle, sig : 'n2, pr : 7 >
                 < 'n2 : Nodo | est : idle, sig : 'n3, pr : 2 >
                 < 'n3 : Nodo | est : idle, sig : 'n1, pr : 3 > .
endom)

---(
red modelCheck(initial, <> [] esLider('n1)) .
red modelCheck(initial, [] liderUnico) .
)

***( -------------------------------------
***  Última clase de teoría
***  ------------------------------------- )

***(
Podemos transformar reglas en ecuaciones si:
+ Son terminantes. (NO: rl a => b . rl b => a . )
+ Son confluentes (deterministas). (NO: rl a => b . rl a => c . )
+ Son P-trasparentes (la propiedad P no cambia al aplicarse la regla).
  (P = Hay lider, p(lider --> rl p(inactivo) => p(activo) . )
***)

mod PROP-A is
    sort A .
    ops a b c d e : -> A [ctor] .
    rl a => b .
    rl b => c .
    rl c => d .
    op esA : -> Prop .
    subsort A < State .
    eq a |= esA = true .
    ops esB esC esD : -> Prop [ctor] .
    --- ...
endm

fmod MEMORY is
    pr QID . pr INT .
    sort Mem .
    op [_,_] : Qid Int -> Mem [ctor] .
    op none : -> Mem [ctor] .
    op __ : Mem Mem -> Mem [ctor assoc comm id:none] .
endfm

fmod TEST is
    pr MEMORY .
    sort Cond .
    op _==_ : Qid Int -> Cond [ctor] .
    op eval : Cond Mem -> Bool .
    var Q : Qid . vars I I' : Int . var M : Mem .
    eq eval(Q == I, [Q, I'] M) = I == I' .
endfm

fmod SEQ is
    pr TEST .
    sort Ins InsUsuario InsInf .
    subsort InsUsuario InsInf < Ins .
    op skip : -> Ins [ctor] .
    op _:=_ : Qid Int -> Ins [ctor] .
    op if_then_fi : Cond Ins -> Ins [ctor] .
    op _;_ : Ins Ins -> Ins [ctor assoc] .
    op while_do_od -> Cond Ins -> ins [ctor] .
    op repeat_forever : Ins -> Ins [ctor] .
endfm

mod PARALELO is
    pr SEQ .
    sorts Proceso Pid PS CPU .
    op {_,_} : Pid Ins -> Proceso [ctor] .
    subsort Proceso < PS .
    op _|_ : PS PS -> PS [ctor assoc comm] .
    op [_,_,_]  PS Mem Pid -> CPU [ctor] .
    op psv : -> PS [ctor] .
    rl [skip] : [{PID, skip ; I}|PS, M, PID'] => [{PID, I}|PS, M PID] .
    rl [asig] : [{PID, Q:=E ; I}|PS, [Q,E']M, PID'] => [{PID, I}|PS, [Q,E]M, PID] .
    rl [if] : [{PID, if C then I fi ; I'}|PS, M, PID'] =>
        [{PID, if eval(C,M) then I ; I' else I' fi}|PS, M, PID] .
    rl [while] : [{PID, while C do I od ; I'}|PS, M, PID'] =>
        [{PID, if eval(C,M) then I ; while C do I od ; I' else I' fi}|PS, M, PID] .
    rl [iu] : [{PID, IU ; I}|PS, M, PID'] => [{PID, I}|PS, M, PID] .
    rl [ii] : [{PID, II ; I}|PS, M, PID'] => [{PID, II ; I}|PS, M, PID] .
endm

--- Algoritmo de exclusión de Decker:
mod PROPS is
    pr PARALELO .
    pr SATISFACTION .
    subsort CPU < State .
    op crit : -> InsUsuario .
    op p1 p2 : -> Ins .
    eq pq = repeat
                'c1 := 1 ;
                while 'c2 == 1 do
                    if 'turn == 2 then
                        'c1 := 0 ;
                        while 'turn == 2 do skip od
                        'c1 := 1
                    fi
                od ;
                crit ;
                'turn := 2 ;
                'c1 := 0
            forever .
    
    op enCrit : Pid -> Prop [ctor] .
    eq [{PID, crit ; I} | PS, M, PID'] |= enCrit(PID) = true .
    op exec : Pid -> Prop [ctor] .
    eq [PS, M, PID] |= exec(PID) = true .
endm

mod TEST is
    pr PROPS .
    pr MODEL-CHECKER .
    pr LTL-SIMPLIFIER .
    op init : -> CPU .
    eq init = [{1,p1} | {2,p2}, ['c1,0]['c2,0]['turn,0], 0] .
endm

---(
red modelCheck(init, [] not(enCrit(1) and enCrit(2))) .
red modelCheck(init, [] <> exec(1) -> [] <> enCrit(1)) .
)
