---(
Gorka Suárez García, ACF

Ejercicio 2:
    El fichero process_huecos.maude define árboles binarios de procesos,
    que son después mejorados con montículos de procesos.
    (a) Intenta entender lo que hace el módulo.
    (b) Rellena las partes de código que se han sustituido por almohadillas.
        La longitud de la cadena de almohadillas no es necesariamente
        representativa de la longitud del código sustituido.
    (c) Ejecuta los comandos en la parte inferior. Copia y pega el resultado
        que obtengas en Maude, y explica en una frase qué se ejecuta y el
        resultado que se obtiene.
)

--- ************************************************************

fmod PROCESS is
    pr STRING .

    *** Processes are composed by a name and a priority.
    sort Process .
    op <_,_> : String Nat -> Process [ctor] .

    vars N N' : Nat .
    vars S S' : String .
    vars P P' : Process .

    *** "min", "max", "_<_", and "_<=_" over processes are
    *** defined by using their priority.
    ops min max : Process Process -> Process [assoc] .
    ops _<_ _<=_ : Process Process -> Bool .

    eq min(< S, N >, < S', N' >) = if N < N' then < S, N > else < S', N' > fi .
    eq max(< S, N >, < S', N' >) = if N > N' then < S, N > else < S', N' > fi .
    eq < S, N > < < S', N' > = N < N' .
    eq < S, N > <= < S', N' > = N <= N' .
endfm

--- ************************************************************

*** Binary trees.
fmod BTREE is
    pr PROCESS .

    *** The sorts for binary trees ("BTree") and nonempty
    *** binary trees ("NeBTree")
    sorts BTree NeBTree .

    *** A nonempty binary tree is also a binary tree.
    subsort NeBTree < BTree .

    *** The (constant) constructor of an "empty" tree.
    op empty : -> BTree [ctor] .

    *** The constructor for bigger trees.
    op _[_]_ : BTree Process BTree -> NeBTree [ctor] .

    vars BT BT' : BTree .
    vars E E' : Process .

    *** The function "complete" checks whether the tree is complete.
    op complete : BTree -> Bool .
    eq [cmp1] : complete(empty) = true .
    eq [cmp2] : complete(BT [E] BT') = complete(BT) and complete(BT') and
                                       depth(BT) == depth(BT') .

    *** The function "depth" returns the depth of the tree.
    op depth : BTree -> Nat .
    eq [dp1] : depth(empty) = 0 .
    eq [dp2] : depth(BT [E] BT') = 1 + max(depth(BT), depth(BT')) .

    *** The function "empty" checks whether the binary tree is empty.
    op empty : BTree -> Bool .
    eq [mt?1] : empty(empty) = true .
    eq [mt?2] : empty(BT [E] BT') = false [owise] .

    *** The function "in?" checks whether the element is in the tree.
    op in? : BTree Process -> Bool .
    eq [in?1] : in?(empty, E) = false .
    eq [in?2] : in?(BT [E] BT', E') = if E == E' then true else
                                      in?(BT, E') or in?(BT', E') fi .

    *** The function "root" returns the root of a nonempty tree.
    op root : NeBTree -> Process .
    eq [root] : root(BT [E] BT') = E .

    *** The functions "left" and "right" return, respectively, the
    *** left and right child of the tree.
    ops left right : NeBTree -> BTree .
    eq [left] : left(BT [E] BT') = BT .
    eq [right] : right(BT [E] BT') = BT' .
endfm

--- ************************************************************

fmod HEAP is
    pr BTREE .

    *** The sorts for heaps ("Heap") and nonempty
    *** heaps ("NeHeap") are declared.
    sorts Heap NeHeap .

    *** A nonempty heap is a specific case of a nonempty binary tree and of
    *** heap, while these two sorts are a specific case of binary tree.
    subsort NeHeap < NeBTree Heap < BTree .

    vars E E' E'' : Process .
    vars BT BT' : BTree .
    vars H L L' L'' R R' R'' : Heap .
    vars NL NR : NeHeap .

    *** The empty binary tree is a heap.
    mb [h1] : empty : Heap .

    *** A binary tree with just one element is a heap.
    mb [h2] : empty [E] empty : NeHeap .

    *** A binary tree with an empty tree as right child is a heap
    *** if the left child only contains one element (i.e., its depth is 1)
    *** and this element is smaller than or equal to the root of the tree.
    cmb [h3] : NL [E] empty : NeHeap
        if root(NL) <= E /\ depth(NL) == 1 .

    *** Otherwise, a binary tree is a heap if both the left child and the
    *** right child are heaps (checked by using variables of sort NeHeap),
    *** the roots of these trees are smaller than or equal to the root of
    *** the tree, and it is a nearly complete binary tree (which is checked by
    *** using the depths).
    cmb [h4] : NL [E] NR : NeHeap
        if root(NL) <= E /\ root(NR) <= E /\
        ((depth(NL) == depth(NR)) and complete(NL)) or
        ((depth(NL) == s(depth(NR))) and complete(NR)) .

    *** The function "insert" inserts the natural number given as first
    *** paramenter in the heap given as second one.
    op insert : Process Heap -> NeHeap .
    
    *** Inserting an element in an empty heap returns a heap with
    *** only one element.
    eq [ins1] : insert(E, empty) = empty [E] empty .
  
    *** Otherwise, we look with the function "depth" for the next free position
    *** and recursively use "insert" to insert the appropriate value (the
    *** minimum between the element being inserted and the root of the
    *** corresponding tree) in this tree, while the other value (the maximum)
    *** is placed as the root of the whole tree.
    ceq [ins2] : insert(E, L [E'] R) = insert(min(E, E'), L) [max(E, E')] R
        if (not complete(L)) or ((depth(L) == depth(R)) and complete(R)) .

    ceq [ins3] : insert(E, L [E'] R) = L [max(E, E')] insert(min(E, E'), R)
        if (not complete(R)) or ((depth(L) > depth(R)) and complete(L)) .

    *** The function "delete" removes the root of the heap.
    op delete : NeHeap -> Heap .
    
    *** Removing an element from the heap that only contains
    *** one element returns the empty heap.
    eq [dl1] : delete(empty [E] empty) = empty .
    
    *** Otherwise, we remove the last element of the heap with the auxiliary
    *** function deleteLast, that returns the heap with this last element
    *** removed and the element, and then sinks this element with sink.
    ceq [dl2] : delete(H) = sink(L', E', R')
        if < L' [E] R', E' > := deleteLast(H) .

    *** The sort "DeletionPair" is used to return a pair composed of a heap
    *** and a natural number when using the function "deleteLast".
    sort DeletionPair .
    op <_,_> : Heap Process -> DeletionPair [ctor] .

    *** The function "deleteLast" removes the last element of the heap
    *** and returns a pair with the heap with this last element removed
    *** and the element.
    op deleteLast : Heap -> DeletionPair .

    *** If the heap only contains one element, the returned heap is empty
    *** and the element is returned.
    eq [dll1] : deleteLast(empty [E] empty) = < empty, E > .

    *** Otherwise, we look for the appropriate child to continue the
    *** search by using the depth function, use recursively deleteLast
    *** to do it, and build the tree using the value thus obtained.
    ceq [dll2] : deleteLast(NL [E] R) = < NL [E] R', E' >
        if depth(NL) == depth(R) /\ < R', E' > := deleteLast(R) .

    ceq [dll3] : deleteLast(NL [E] R) = < L' [E] R, E' >
        if depth(NL) > depth(R) /\ < L', E' > := deleteLast(NL) .

    *** The function "sink" places a value in its appropriate position,
    *** starting from the root.
    op sink : Heap Process Heap ~> Heap .

    *** If both children are empty, we create a heap with one element.
    eq [s1] : sink(empty, E, empty) = empty [E] empty .

    *** If the left child has one single value, we create a tree with
    *** two values, using max and min to place the appropriate values.
    eq [s2] : sink(empty [E'] empty, E, empty) = insert(E, empty [E'] empty) .

    *** Otherwise, we place the bigger of the three elements (the root of the
    *** left child, the root of the right child, and the element being sunk)
    *** as root of the tree, and recursively use sink in the appropriate heap.
    ceq [s3] : sink(L, E, R) =
        if E < E' then
            if E' < E'' then
                L [E''] sink(L'', E, R'')
            else
                sink(L', E, R') [E'] R
            fi
        else
            if E < E'' then
                L [E''] sink(L'', E, R'')
            else
                L [E] R
            fi
        fi
        if L' [E'] R' := L /\ L'' [E''] R'' := R .
endfm

--- ************************************************************

mod PROCESS-TEST is
    pr HEAP .
    ops a2 b3 b8 c5 d1 d6 e1 e4 : -> Process .
    eq a2 = < "a", 2 > .
    eq b3 = < "b", 3 > .
    eq b8 = < "b", 8 > .
    eq c5 = < "c", 5 > .
    eq d1 = < "d", 1 > .
    eq d6 = < "d", 6 > .
    eq e1 = < "e", 1 > .
    eq e4 = < "e", 4 > .
    
    ops hi1 hi2 hi3 hi4 hi5 hi6 hi7 hi8 : -> Heap .
    eq hi1 = insert(a2, empty) .
    eq hi2 = insert(b3, hi1) .
    eq hi3 = insert(b8, hi2) .
    eq hi4 = insert(c5, hi3) .
    eq hi5 = insert(d1, hi4) .
    eq hi6 = insert(d6, hi5) .
    eq hi7 = insert(e1, hi6) .
    eq hi8 = insert(e4, hi7) .
    
    ops hd0 hd1 hd2 hd3 hd4 hd5 hd6 hd7 : -> Heap .
    eq hd7 = delete(hi8) .
    eq hd6 = delete(hd7) .
    eq hd5 = delete(hd6) .
    eq hd4 = delete(hd5) .
    eq hd3 = delete(hd4) .
    eq hd2 = delete(hd3) .
    eq hd1 = delete(hd2) .
    eq hd0 = delete(hd1) .
endm

---(

Resultados:
===========

Maude> red (empty [a2] empty) [b3] (empty [c5] (empty [d6] empty)) .
reduce in PROCESS-TEST : (empty[a2]empty)[b3](empty[c5](empty[d6]empty)) .
rewrites: 7 in 11202171492ms cpu (0ms real) (0 rewrites/second)
result NeBTree: (empty[< "a",2 >]empty)[< "b",3 >](empty[< "c",5 >](empty[<"d",6 >]empty))


Maude> red (empty [a2] empty) [b8] (empty [c5] empty) .
reduce in PROCESS-TEST : (empty[a2]empty)[b8](empty[c5]empty) .
rewrites: 47 in 471369508ms cpu (0ms real) (0 rewrites/second)
result NeHeap: (empty[< "a",2 >]empty)[< "b",8 >](empty[< "c",5 >]empty)


Maude> red ((empty [d1] empty) [a2] (empty [e1] empty)) [b8] ((empty [e4] empty) [c5] empty) .
reduce in PROCESS-TEST : ((empty[d1]empty)[a2](empty[e1]empty))[b8]((empty[e4]empty)[c5]empty) .
rewrites: 147 in 471369508ms cpu (1ms real) (0 rewrites/second)
result NeHeap: ((empty[< "d",1 >]empty)[< "a",2 >](empty[< "e",1 >]empty))
               [<"b",8 >]((empty[< "e",4 >]empty)[< "c",5 >]empty)


Maude> red root((empty [a2] empty) [b3] (empty [c5] (empty [d6] empty))) .
reduce in PROCESS-TEST : root((empty[a2]empty)[b3](empty[c5](empty[d6]empty))) .
rewrites: 8 in 9884156793ms cpu (0ms real) (0 rewrites/second)
result Process: < "b",3 >


Maude> red depth((empty [a2] empty) [b3] (empty [c5] (empty [d6] empty))) .
reduce in PROCESS-TEST : depth((empty[a2]empty)[b3](empty[c5](empty[d6]empty))) .
rewrites: 24 in 11327037002ms cpu (0ms real) (0 rewrites/second)
result NzNat: 3


Maude> red right((empty [a2] empty) [b3] (empty [c5] (empty [d6] empty))) .
reduce in PROCESS-TEST : right((empty[a2]empty)[b3](empty[c5](empty[d6]empty))) .
rewrites: 8 in 9882620793ms cpu (0ms real) (0 rewrites/second)
result NeBTree: empty[< "c",5 >](empty[< "d",6 >]empty)

)
