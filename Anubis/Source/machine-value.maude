--- **************************************************************************************
--- * Anubis Programming Language
--- * Copyright (c) 2014-2015 Gorka Suárez García
--- *
--- * Permission is hereby granted, free of charge, to any person obtaining a copy
--- * of this software and associated documentation files (the "Software"), to deal
--- * in the Software without restriction, including without limitation the rights
--- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
--- * copies of the Software, and to permit persons to whom the Software is
--- * furnished to do so, subject to the following conditions:
--- *
--- * The above copyright notice and this permission notice shall be included in
--- * all copies or substantial portions of the Software.
--- *
--- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
--- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
--- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
--- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
--- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
--- * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
--- * DEALINGS IN THE SOFTWARE.
--- **************************************************************************************

--- |************************************************************************************|
--- | ANUBIS-MACHINE-VALUE: This module contains the machine representation of values.   |
--- |************************************************************************************|

fmod ANUBIS-MACHINE-VALUE is
    protecting ANUBIS-UTILITY-TYPES .
    protecting ANUBIS-LANG-TYPES .

    *** |================================================================================|
    *** | Sorts                                                                          |
    *** |================================================================================|

    sorts Values Value BasicValues BasicValue ObjectValue ObjectData FieldValues
          FieldValue BoolValue CharValue NumericValue IntegerValue RealValue
          PointerValue RunnerValue TypeValue ItemValue SequenceValue BuiltInValue
          VoidValue .

    *** |================================================================================|
    *** | Subsorts                                                                       |
    *** |================================================================================|

    subsort BasicValue ObjectValue RunnerValue < Value .
    subsort BoolValue CharValue NumericValue PointerValue < BasicValue .
    subsort IntegerValue RealValue < NumericValue .
    subsort TypeValue ItemValue SequenceValue BuiltInValue < RunnerValue .

    subsort Value < Values .
    subsort BasicValue < BasicValues < Values .
    subsort FieldValue < FieldValues .
    subsort VoidValue < Value BasicValue .

    *** |================================================================================|
    *** | Operators                                                                      |
    *** |================================================================================|

    op void : -> VoidValue [ctor] .
    op fvnil : -> FieldValue [ctor] .

    op __ : Values Values -> Values [ctor assoc id: void] .
    op __ : BasicValues BasicValues -> BasicValues [ctor assoc id: void] .
    op __ : FieldValues FieldValues -> FieldValues [ctor assoc id: fvnil] .

    --- //--------------------------------------------------------------------------------
    --- // obj: ref. count, type, data.
    --- //--------------------------------------------------------------------------------

    op obj : Nat LangType ObjectData -> ObjectValue [ctor] .

    --- //--------------------------------------------------------------------------------
    --- // odt: fields (object).
    --- // odt: values (tuple, list).
    --- // odt: value (string, function).
    --- // odt: instance, method name (function).
    --- // odt: lambda id., closure values (function).
    --- //
    --- // (NOTE: Functions save the name of the function, but when we need to use a
    --- //        method of an object, we'll save a pointer to the instance.)
    --- //--------------------------------------------------------------------------------

    op odt : FieldValues -> ObjectData [ctor] .
    op odt : BasicValues -> ObjectData [ctor] .
    op odt : String -> ObjectData [ctor] .
    op odt : PointerValue String -> ObjectData [ctor] .
    op odt : Nat BasicValues -> ObjectData [ctor] .

    --- //--------------------------------------------------------------------------------
    --- // fld: type, name, value.
    --- //--------------------------------------------------------------------------------

    op fld : LangType String BasicValue -> FieldValue [ctor] .

    --- //--------------------------------------------------------------------------------
    --- // Typed values
    --- //--------------------------------------------------------------------------------

    op bsval : Bool -> BoolValue [ctor] .
    op csval : String -> CharValue [ctor] .
    op isval : Int -> IntegerValue [ctor] .
    op rsval : Float -> RealValue [ctor] .
    op psval : Nat -> PointerValue [ctor] .

    --- //--------------------------------------------------------------------------------
    --- // Dynamic values
    --- //--------------------------------------------------------------------------------

    op bdval : Bool -> BoolValue [ctor] .
    op cdval : String -> CharValue [ctor] .
    op idval : Int -> IntegerValue [ctor] .
    op rdval : Float -> RealValue [ctor] .
    op pdval : Nat -> PointerValue [ctor] .

    --- //--------------------------------------------------------------------------------
    --- // Special values:
    --- // tval: type.
    --- // ival: address, const flag, type, value, class type.
    --- // ival: name, const flag, type, value, class type.
    --- // zval: built-in name element.
    --- //--------------------------------------------------------------------------------

    op tval : String -> TypeValue [ctor] .
    op ival : Nat Bool LangType Value LangType -> ItemValue [ctor] .
    op ival : String Bool LangType Value LangType -> ItemValue [ctor] .
    op sval : Values -> SequenceValue [ctor] .
    op zval : String -> BuiltInValue [ctor] .

endfm
