--- **************************************************************************************
--- * Anubis Programming Language
--- * Copyright (c) 2014-2015 Gorka Suárez García
--- *
--- * Permission is hereby granted, free of charge, to any person obtaining a copy
--- * of this software and associated documentation files (the "Software"), to deal
--- * in the Software without restriction, including without limitation the rights
--- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
--- * copies of the Software, and to permit persons to whom the Software is
--- * furnished to do so, subject to the following conditions:
--- *
--- * The above copyright notice and this permission notice shall be included in
--- * all copies or substantial portions of the Software.
--- *
--- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
--- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
--- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
--- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
--- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
--- * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
--- * DEALINGS IN THE SOFTWARE.
--- **************************************************************************************

--- |************************************************************************************|
--- | ANUBIS-RUNNER-START: This module contains the start code of the runner.            |
--- |************************************************************************************|

fmod ANUBIS-RUNNER-START is
    protecting ANUBIS-APPLICATION .

    *** |================================================================================|
    *** | Operators                                                                      |
    *** |================================================================================|

    op getStartCode : Application -> Application .
    op getStartCode : Program -> Instructions .
    op getStaticStartCode : TypesList -> Statements .
    op getStaticStartCode' : Bool TypesList -> Statements .

    op hasStaticStartCode : TypeItem -> Bool .
    op hasStartSequence : TypeItem -> Bool .
    op hasStaticCtor : TypeItem -> Bool .
    op hasStaticCtor : ConstructorsList -> Bool .

    *** |================================================================================|
    *** | Variables                                                                      |
    *** |================================================================================|

    var PRGM : Program .
    var TYPI : TypeItem .
    var TYPL : TypesList .
    var CTRI : ConstructorItem .
    var CTRL : ConstructorsList .
    var INS0 : Instructions .
    var APP0 : Application .

    vars CNT0 CNT1 : Context .
    vars STS0 STS1 STS2 STS3 : Statements .

    *** |================================================================================|
    *** | Equations                                                                      |
    *** |================================================================================|

    ceq getStartCode(APP0) = APP0[Context: CNT1]
        if INS0 := getStartCode(APP0[Program]) /\
           CNT0 := APP0[Context]               /\
           CNT1 := CNT0 [Instructions: INS0]    .

    ceq getStartCode(PRGM) = instr(STS3)
        if STS0 := getStatements(PRGM[Start])      /\
           STS1 := getStaticStartCode(PRGM[Types]) /\
           STS2 := addStatements(STS0, STS1)       /\
           STS3 := addStatements(STS2, 'main() ;)   .

    eq getStaticStartCode(tinil) = ;; .
    eq getStaticStartCode(TYPI TYPL) = getStaticStartCode'(hasStaticStartCode(TYPI), TYPI TYPL) .
    eq getStaticStartCode'(true, TYPI TYPL) = qid(TYPI[Name]) ['"$CTOR"] ; getStaticStartCode(TYPL) .
    eq getStaticStartCode'(false, TYPI TYPL) = getStaticStartCode(TYPL) .

    eq hasStaticStartCode(TYPI) = hasStartSequence(TYPI) or hasStaticCtor(TYPI) .

    eq hasStartSequence(TYPI) = TYPI[Start] =/= {} .

    eq hasStaticCtor(TYPI) = hasStaticCtor(TYPI[Constructors]) .

    eq hasStaticCtor(ctinil) = false .
    eq hasStaticCtor(CTRI CTRL) = if CTRI[IsStatic] then true else hasStaticCtor(CTRL) fi .

endfm
