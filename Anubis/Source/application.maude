--- **************************************************************************************
--- * Anubis Programming Language
--- * Copyright (c) 2014-2015 Gorka Suárez García
--- *
--- * Permission is hereby granted, free of charge, to any person obtaining a copy
--- * of this software and associated documentation files (the "Software"), to deal
--- * in the Software without restriction, including without limitation the rights
--- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
--- * copies of the Software, and to permit persons to whom the Software is
--- * furnished to do so, subject to the following conditions:
--- *
--- * The above copyright notice and this permission notice shall be included in
--- * all copies or substantial portions of the Software.
--- *
--- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
--- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
--- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
--- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
--- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
--- * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
--- * DEALINGS IN THE SOFTWARE.
--- **************************************************************************************

--- |************************************************************************************|
--- | ANUBIS-APPLICATION: This module represents the application.                        |
--- |************************************************************************************|

fmod ANUBIS-APPLICATION is
    protecting ANUBIS-PARSER .
    protecting ANUBIS-MACHINE-MEMORY .
    protecting ANUBIS-MACHINE-CONTEXT .

    *** |================================================================================|
    *** | Sorts                                                                          |
    *** |================================================================================|

    sort Application .

    *** |================================================================================|
    *** | Operators                                                                      |
    *** |================================================================================|

    op app : Program Memory Ambit Context ContextStack String -> Application [ctor] .

    op appCreate : String SourceProject -> Application .
    op appCreate : Program -> Application .

    op _`[Program`] : Application -> Program .
    op _`[Memory`] : Application -> Memory .
    op _`[Ambit`] : Application -> Ambit .
    op _`[Context`] : Application -> Context .
    op _`[ContextStack`] : Application -> ContextStack .
    op _`[Output`] : Application -> String .

    op _`[Program:_`] : Application Program -> Application .
    op _`[Memory:_`] : Application Memory -> Application .
    op _`[Ambit:_`] : Application Ambit -> Application .
    op _`[Context:_`] : Application Context -> Application .
    op _`[ContextStack:_`] : Application ContextStack -> Application .
    op _`[Output:_`] : Application String -> Application .

    *** |================================================================================|
    *** | Variables                                                                      |
    *** |================================================================================|

    var PRJ : SourceProject .
    var ERR : Error .

    vars PRG PRG' : Program .
    vars MEM MEM' : Memory .
    vars AMB AMB' : Ambit .
    vars CNT CNT' : Context .
    vars CNS CNS' : ContextStack .
    vars STR STR' : String .

    *** |================================================================================|
    *** | Equations                                                                      |
    *** |================================================================================|

    eq appCreate(STR, PRJ) = appCreate(parse(STR, PRJ)) .
    eq appCreate(PRG) = app(PRG, mcnil, adnil, contextCreate, ctnil, "") .
    eq appCreate(ERR) = app(pnil, mcnil, adnil, ctnil, ctnil, getErrorString(ERR)) .

    eq app(PRG, MEM, AMB, CNT, CNS, STR) [Program] = PRG .
    eq app(PRG, MEM, AMB, CNT, CNS, STR) [Memory] = MEM .
    eq app(PRG, MEM, AMB, CNT, CNS, STR) [Ambit] = AMB .
    eq app(PRG, MEM, AMB, CNT, CNS, STR) [Context] = CNT .
    eq app(PRG, MEM, AMB, CNT, CNS, STR) [ContextStack] = CNS .
    eq app(PRG, MEM, AMB, CNT, CNS, STR) [Output] = STR .

    eq app(PRG, MEM, AMB, CNT, CNS, STR) [Program: PRG'] = app(PRG', MEM, AMB, CNT, CNS, STR) .
    eq app(PRG, MEM, AMB, CNT, CNS, STR) [Memory: MEM'] = app(PRG, MEM', AMB, CNT, CNS, STR) .
    eq app(PRG, MEM, AMB, CNT, CNS, STR) [Ambit: AMB'] = app(PRG, MEM, AMB', CNT, CNS, STR) .
    eq app(PRG, MEM, AMB, CNT, CNS, STR) [Context: CNT'] = app(PRG, MEM, AMB, CNT', CNS, STR) .
    eq app(PRG, MEM, AMB, CNT, CNS, STR) [ContextStack: CNS'] = app(PRG, MEM, AMB, CNT, CNS', STR) .
    eq app(PRG, MEM, AMB, CNT, CNS, STR) [Output: STR'] = app(PRG, MEM, AMB, CNT, CNS, STR') .

endfm
